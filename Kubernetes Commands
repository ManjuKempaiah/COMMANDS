aws configure
aws sts get-caller-identity

eksctl create cluster --name=jhc-aug-dev
eksctl delete cluster --name=jhc-aug-dev

kubectl run myapp --image=nginx --port=80
kubectl run nodeapp --image=manjukempaiah/node-web-app --port=8080
kubectl expose pods/myapp --type="NodePort" --port 8080
kubectl get nodes
kubectl get pods
kubectl get svc
kubectl get rs
kubectl get deployment
kubectl delete pods
kubectl delete svc
kubectl delete rs
kubectl delete deployment
kubectl get pods -o wide
kubectl describe svc myapp
kubectl delete pods myapp nodeapp
kubectl create -f pods.yml
kubectl apply -f nginxsvc.yml
kubectl rollout status deployment myapp
kubectl rollout undo deployment myapp
kubectl describe pod myapp-8588f5656d-bdklz
kubectl delete deployment myapp
kubectl create ns argocd
kubectl get ns
kubectl get pods -n argocd
kubectl get svc -n argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl edit svc/argocd-server -n argocd
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
kubectl cordon <node_name>
kubectl uncordon <node_name>
kubectl taint
kubectl logs <pod_name>

kubectl exec -it myapp2 -- /bin/bash
kubectl exec -it <pod_name> -- /bin/bash
kubectl describe pod nginx-p7dwj -n default | grep "Restart Count"
kubectl describe pod <pod_name> -n namespace | grep "Restart Count"
kubectl get pods --field-selector=status.phase=Failed
kubectl get pods -A | grep "0/"
kubectl rollout restart deployment <deployment_name> -n <namespace>
Kubectl logs <Pod_name> -c <conatiner_name>
kubectl label nodes <node_name> memoryOptimised=yes

---------------------------------------------------------------------------------------------------------------

eksctl create cluster --name=jhc-aug-dev
eksctl delete cluster --name=jhc-aug-dev 


kubectl create -f pods.yml
kubectl apply -f pods.yml
kubectl delete -f pods.yml

kubectl logs <pod_name>
kubectl logs <pod_name> -c conatiner_name
kubectl exec -it <pod_name> -- /bin/bash
kubectl get pods -o wide


kubectl describe pod <pod_name>
kubectl describe pod <pod_name> -c container_name
kubectl describe pod <pod_name> -n namespace | grep "Restart Count"


To find all pods across all namespaces that are not ready
kubectl get pods -A | grep "0/"

To find pods that are not ready
kubectl get pods | grep "0/"

To find all failed pods in the current namespace,
kubectl get pods --field-selector=status.phase=Failed

To find failed pods across all namespaces, add the -A flag:
kubectl get pods -A --field-selector=status.phase=Failed


kubectl rollout status deployment deployment_name -n namespace
kubectl rollout undo deployment deployment_name -n namespace
kubectl rollout restart deployment deployment_name -n namespace

kubectl rollout status deployment/your-deployment-name -n your-namespace
kubectl rollout history deployment/your-deployment-name -n your-namespace
kubectl rollout undo deployment/your-deployment-name -n your-namespace
kubectl describe deployment your-deployment-name -n your-namespace
kubectl rollout undo deployment/your-deployment-name -n your-namespace --to-revision=n

kubectl scale deployment <deployment_name> -n <namespace> --replicas=3

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl edit svc/argocd-server -n argocd
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
