sudo yum install docker -y
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -a -G docker ec2-user
sudo systemctl restart docker
docker -v
sudo vi Dockerfile
docker build -t manjukempaiah/pyapp:0.0.1 .
docker run -d -p 9000:80 manjukempaiah/pyapp:0.0.1
docker ps
docker ps -a
docker rm <containe_id>
docker rm -f $(docker ps -aq)
docker images
docker rmi <image_id>
docker rmi -f $(docker images -q)
docker build -t manjukempaiah/tomcat:0.0.1 .
docker run -it manjukempaiah/tomcat:0.0.1
docker run -it manjukempaiah/tomcat:0.0.1 echo "ManjuKempaiah"
docker run -it manjukempaiah/tomcat:0.0.1 facebook.com
docker build -t manjukempaiah/tomcat:0.0.1 . --build-arg JAVA_PKG=openjdk8
docker run -it -e CONFIG_FILE="/app/prod.config" manjukempaiah/tomcat:0.0.1
docker run -it --env-file ./manju.env manjukempaiah/tomcat:0.0.1
printenv
exit
docker ps --filter="status=exited" -q
  docker ps -f="status=exited" -q
  docker ps -f "status=exited" -q
docker rm $(docker ps --filter="status=exited" -q)
docker rm -f $(docker ps --filter="status=exited" -q)
docker run -itd --name=one alpine 
docker run -itd --name=two alpine 
docker ps
docker inspect <container_id>
docker exec -it <container_id> bash or sh
docker network list
docker network inspect bridge
docker network create --driver=bridge manju_jhc
docker run -itd --name=one --network=manju_jhc alpine
docker run -itd --name=two --network=manju_jhc alpine
docker image prune -f
docker system prune -f
docker-compose up -d 
docker-compose ps
docker logs <container_id>
docker stats
docker info
docker pull <image_name>
docker login -u manjukempaiah
docker push manjukempaiah/tomcat:0.0.1
docker system df
docker top
docker rm 954b7d953d9c 9ec006c56557
docker rmi 39e94893115b e4720093a3c1

docker images -f "dangling=true"
docker images -f "dangling=true" -q
docker images --filter="dangling=true" -q
docker images -f="dangling=true" -q
docker rmi -f $(docker images -f "dangling=true" -q)

Docker-Compose Installation:

sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose version

--------------------------------------------------------------------------------------------
FROM        -- Specifies the base image for the docker image
WORKDIR     -- Sets the Working Directory inside the docker image
RUN         -- RUN is the docker build time instruction
CMD         -- CMD is the docker run time instruction
COPY        -- COPY copies files and folders from host machine to image
ADD         -- ADD copies file and folders from host machine to image
               ADD have an extra capability, It Downloads the file from URL
               And also it auto extract the compressed file
EXPOSE      -- Exposes port to the host machine
CMD         -- CMD can be Overridden at run time
ENTRYPOINT  -- ENTRYPOINT cannot be overridden at run, it is getting appended
               CMD and ENTRYPOINT cab be used together
ARG         -- ARG is the docker build time Argument
ENV         -- ENV is the docker run time Argument
LABEL       -- To add Metadata
USER        -- To run application using specific user
HEALTHCHECKS-- To check the health of the application
. Indicates -- Current Directory as build context
-d          -- Detached Mode(in the background)
-it         -- Interactive Terminal(in the foreground)
-itd        -- Interactive Terminal Detached Mode

-----------------------------------------------------------------------------------------------------------
docker ps
docker ps -a
docker rm contianer_id
docker rm -f container_id
docker rm -f $(docker ps -aq)
docker ps --filter="status=exited" -q
docker ps -f="status=exited" -q
docker ps -f "status=exited" -q
docker rm -f $(docker ps --filter="status=exited" -q)

docker images
docker rmi -image_id
docker rmi -f image_id
docker rmi -f $(docker images -q)
docker images --filter="dangling=true" -q
docker images -f="dangling=true" -q
dcoker images -f "dangling=true" -q
docker rmi -f $(docker images --filter="dangling=true" -q)

docker logs container_id
docker stats
docker exec -it container_id bash
docker inspect conatiner_id
docker-compose up -d
docker-compose ps
docker network create --driver=bridge network_name
docker history image_id

docker image prune -f
docker system prune -f

docker volume ls
docker volume create volume_name
docker volume inspect volume_name

docker build -t manjukempaiah/<image_name>:<tag> .
docker build -t username/<image_name>:<tag> . 
docker build -t <nexus-repo-url>/<image_name>:<tag> .

docker run -d -p <hostport>:<conatinerport> --name conatiner_name <image_name>:<tag>

docker build -t manjukempaiah/<image_name>:<tag> . --build-arg JAVA_PKG=openjdk11
docker run -it -e CONFIG_FILE="/app/prod.config" manjukempaiah/<iamge_name>:<tag>
docker run -it --env-file ./manju.env manjukempaiah/<image_name>:<tag>





